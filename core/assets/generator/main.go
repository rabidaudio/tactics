package main

import (
	"flag"
	"log"
	"os"
	"strings"
	"text/template"

	"gopkg.in/yaml.v3"
)

var assetTemplate = template.Must(template.New("assets").Parse(`
// Code generated by core/assets/generator; DO NOT EDIT.

package {{ if eq $.Package "" }}assets{{ else }}{{ $.Package }}{{ end }}

import "github.com/rabidaudio/tactics/core/sprite"

{{- range $ssname, $ss := $.Spritesheets }}
var {{ $ssname }} = sprite.OpenTileAsset("{{ $ss.Path }}", {{ index $ss.TileSize 0 }}, {{ index $ss.TileSize 1 }})
{{ range $gname, $map := $ss.Sprites }}
var {{ $gname }} = struct {
	{{- range $sname, $s := $map }}
	{{ $sname }} sprite.Template
	{{- end }}
}{
	{{- range $sname, $s := $map }}
	{{ $sname }}: {{ $ssname }}.SpriteTemplate([][]int{
			{{- range $i, $f := $s.Frames }}
				{ {{ index $f 0 }}, {{ index $f 1 }} },
			{{- end }}
		}){{ if ne $s.Rate 0 }}.Rate({{ $s.Rate }}){{ end }}{{ if $s.Reverse }}.Reversed(){{ end }}{{ if $s.Loop }}.Loop(true){{ end }},
	{{- end }}
}
{{ end }}
{{- end }}`))

var (
	cpath = flag.String("path", "assets.yml", "The path to a YAML file declaring the assets to generate")
)

func main() {
	flag.Parse()

	inf, err := os.Open(*cpath)
	if err != nil {
		log.Fatalf("open file: %v", err)
	}
	var conf Config
	if err = yaml.NewDecoder(inf).Decode(&conf); err != nil {
		log.Fatalf("read config: %v", err)
	}
	outpath := strings.Replace(*cpath, ".yml", ".go", 1)
	of, err := os.Create(outpath)
	if err != nil {
		log.Fatalf("write file: %v", err)
	}
	assetTemplate.Execute(of, conf)
}

type Config struct {
	Spritesheets map[string]SpriteSheet `yaml:"Spritesheets"`
	Package      string                 `yaml:"Package,omitempty"`
}

type SpriteSheet struct {
	Path     string                       `yaml:"Path"`
	TileSize []int                        `yaml:"TileSize"`
	Sprites  map[string]map[string]Sprite `yaml:"Sprites"`
}

type Sprite struct {
	Frames  [][]int `yaml:"Frames"`
	Rate    int     `yaml:"Rate,omitempty"`
	Reverse bool    `yaml:"Reverse,omitempty"`
	Loop    bool    `yaml:"Loop,omitempty"`
}
